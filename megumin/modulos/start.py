
import time
import psutil
import humanize
import platform
import asyncio 

from pyrogram import filters
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from megumin import megux, version
from megumin import START_TIME
from megumin.utils import get_collection, time_formatter

CHAT_LOGS = -1001556292785
GROUPS = get_collection("GROUPS")
USERS = get_collection("USERS")
USERS_STARTED = get_collection("USERS_START")

START_PRIVADO = """
Ol√°! Meu nome √© **WhiterKang** sou um bot √∫til e divertido para voc√™ :3

__Se voc√™ gostar das minhas fun√ß√µes me adicione a seu grupo!__
"""

HELP_ADMIN = """
Aqui est√° a ajuda para o m√≥dulo **Admin**:

**Todos usuarios:**
 ‚Ä¢ /admins - Lista todos administradores do chat

**Apenas admin:**
 ‚Ä¢ /pin - Fixa a mensagem respondida
 ‚Ä¢ /unpin - Desfixa a mensagem atualmente fixada
 ‚Ä¢ /promote < username/reply msg > - promove um usuario a administrador do chat
 ‚Ä¢ /demote < username/reply msg > - remove os privil√©gios de administrador do usuario
 ‚Ä¢ /title < titulo aqui >: define uma custom tag de administrador de um usuario promovido pelo WhiterKang (ainda n√£o dispon√≠vel)
 ‚Ä¢ /zombies - Procura e limpa contas excluidas no chat (ainda n√£o dispon√≠vel)
"""

sm = psutil.swap_memory()
uname = platform.uname() 


@megux.on_message(filters.command("start", prefixes=["/", "!"]))
async def start_(c: megux, message: Message):
    if message.chat.type == "private":
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton(text="‚ùîAjuda", callback_data="help_menu"),
                 InlineKeyboardButton(text="üì¶ C√≥digo Fonte", url="https://github.com/davitudoplugins1234/WhiterKang")
                ],
                [
                    InlineKeyboardButton(text="Info", callback_data="infos"),
                    InlineKeyboardButton(text="Suporte", url="https://t.me/fnixsup"),
                ],
                [
                    InlineKeyboardButton(
                        text="‚ú® Me adicione a um grupo",
                        url=f"https://t.me/whiterkangbot?startgroup=new",
                    ),
                ],
            ]
        )
        gif = "https://telegra.ph/file/576f9c3193a1dade06bce.gif"
        msg = START_PRIVADO
        await message.reply_animation(gif, caption=msg, reply_markup=keyboard)
        user_id = message.from_user.id
        fname = message.from_user.first_name
        uname = message.from_user.username
        user_start = f"#NEW_USER #LOGS\n\n**User:** {fname}\n**ID:** {message.from_user.id} <a href='tg://user?id={user_id}'>**Link**</a>"
        found = await USERS_STARTED.find_one({"id_": user_id})
        if not found:
            await asyncio.gather(
                USERS_STARTED.insert_one({"id_": user_id, "user": fname}),
                c.send_log(user_start, disable_notification=False, disable_web_page_preview=True))
    else:
        return await message.reply("Oi meu nome √© **WhiterKang**.")
        

    @megux.on_callback_query(filters.regex(pattern=r"^infos$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê„Äå Sobre  WhiterKang „Äç
‚ï† Vers√£o : `{version.__megumin_version__}`
‚ï† Uptime : `{time_formatter(time.time() - START_TIME)}`
‚ï† System : `{client.system_version}`
‚ï† Cpu : `{psutil.cpu_percent(interval=1)}%`
‚ï† Ram : `{psutil.virtual_memory().percent}%`
‚ï† Disco : `{psutil.disk_usage("/").percent}%`
‚ï† Python : `{version.__python_version__}`
‚ï† Pyrogram : `{version.__pyro_version__}`
‚ïö‚ïê‚ïó
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("Voltar", callback_data="start_back"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )

    @megux.on_callback_query(filters.regex(pattern=r"^start_back$"))
    async def start_back(client: megux, cb: CallbackQuery):
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=START_PRIVADO,
            reply_markup=keyboard,
        )

    @megux.on_callback_query(filters.regex(pattern=r"^help_menu$") | filters.regex("/start help_"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Ol√°! Me chamo **WhiterKang**. Sou um bot de gerenciamento de grupo modular com alguns extras divertidos! D√™ uma olhada no seguinte para ter uma id√©ia de algumas das coisas em que posso ajud√°-lo. 

Comandos b√°sicos:
- /start: Comando Legal pra ver se eu estou Vivo ou N√£o:3
- /help: envia esta mensagem de ajuda
- /ping Ver o atraso para o bot retornar a mensagem.
- /about Veja mais sobre os desenvolvedores. 

Todos os comandos podem ser usados com os seguintes caracteres: <code>/  !</code>
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("Admin", callback_data="admin_help_button"),
                    InlineKeyboardButton("Anilist", callback_data="anilist_help_button"),
                    InlineKeyboardButton("Android", callback_data="android_help_button"),
                ],
                [
                    InlineKeyboardButton("Outros", callback_data="misc_help_button"),
                    InlineKeyboardButton("Geral", callback_data="geral_help_button"),
                    InlineKeyboardButton("LastFm", callback_data="last_help_button"),
                ],
                [
                    InlineKeyboardButton("Notas", callback_data="notes_help_button"),
                    InlineKeyboardButton("Purges", callback_data="purges_help_button"), 
                    InlineKeyboardButton("YouTube", callback_data="yt_help_button"),
                ],
                [
                    InlineKeyboardButton("Bans", callback_data="bans_help_button"),
                    InlineKeyboardButton("GitHub", callback_data="git_help_button"),
                    InlineKeyboardButton("Memes", callback_data="memes_help_button"),
                ],
                [
                    InlineKeyboardButton("Tradutor", callback_data="tr_help_button"),
                    InlineKeyboardButton("Stickers", callback_data="stickers_help_button"), 
                ],
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="start_back"),
                ],
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )

    @megux.on_callback_query(filters.regex(pattern=r"^start_back$"))
    async def start_back(client: megux, cb: CallbackQuery):
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=START_PRIVADO,
            reply_markup=keyboard,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^admin_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo <b>Admin</b>:

**Todos usuarios:**
 ‚Ä¢ /admins - Lista todos administradores do chat

**Apenas admin:**
 ‚Ä¢ /pin - Fixa a mensagem respondida
 ‚Ä¢ /unpin - Desfixa a mensagem atualmente fixada
 ‚Ä¢ /promote < username/reply msg > - promove um usuario a administrador do chat
 ‚Ä¢ /demote < username/reply msg > - remove os privil√©gios de administrador do usuario
 ‚Ä¢ /title < titulo aqui >: define uma custom tag de administrador de um usuario promovido pelo WhiterKang
 ‚Ä¢ /zombies - Procura e limpa contas excluidas no chat
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^anilist_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo <b>Anilist</b>:

‚Ä¢ /anime - Use este comando para obter informa√ß√µes sobre um anime espec√≠fico usando nome do anime ou ID do anilist
‚Ä¢ /char ou /character - Use este comando para obter informa√ß√µes sobre algum personagem
‚Ä¢ /manga - Use este comando para obter informa√ß√µes sobre algum mang√°
‚Ä¢ /airing - Ainda ser√° adicionado
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^android_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo <b>Android</b>:

‚Ä¢ /device ou /whatis < codename > Obtenha um dispositivo pelo codename.
‚Ä¢ /app < nome do app > - Use para pesquisar aplicativos na Google Play Store ( n√£o dispon√≠vel )
‚Ä¢ /magisk - Obtenha a √∫ltima vers√£o do magisk.
‚Ä¢ /twrp < codename > - Busca o √∫ltimo TWRP dispon√≠vel para um determinado codinome de dispositivo.
‚Ä¢ /ofox < codename > - Busca a √∫ltima vers√£o do OrangeFox dispon√≠vel para um determinado dispositivo ( n√£o dispon√≠vel )
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^last_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo <b>LastFm</b>:

Antes de tudo voc√™ deve estar registrado no lastfm

‚Ä¢ /lt ou /lastfm para mostrar oque voc√™ esta ouvindo agora.
‚Ä¢ /reg ou /setuser para definir seu usuario LastFM.
‚Ä¢ /deluser ou /duser para remover seu nome de usuario do banco de dados.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^notes_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Under development...
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^tr_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo <b>Tradutor</b>

‚Ä¢ /tr (c√≥digo de idioma) <b>Texto</b> ou mensagem respondida.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^yt_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo **YouTube**:

‚Ä¢ /song <titulo> Baixe m√∫sicas.
‚Ä¢ /video <titulo> Baixe videos.
‚Ä¢ /yt <b>[Palavra]</b> Faz uma busca no YouTube v√≠deos com a palavra que voc√™ escreveu e retorna uma lista com v√≠deos.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^bans_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo **Bans**:

‚Ä¢ /ban Bane um usu√°rio no chat.
‚Ä¢ /banme Bane-se.
‚Ä¢ /unban Desbane a um usu√°rio.
‚Ä¢ /mute Silencia um usu√°rio no chat.
‚Ä¢ /tmute (tempo) Silencia temporariamente um usu√°rio no chat.
‚Ä¢ /unmute Desmuta um usu√°rio no chat.
‚Ä¢ /kick Chuta um usu√°rio do chat.
‚Ä¢ /kickme Saia do grupo.
‚Ä¢ /muteme Muta-se.
  
Um exemplo de silenciar algu√©m temporariamente:
/tmute @username 2h isso silencia o usu√°rio por 2 horas.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^git_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo **GitHub**:

‚Ä¢ /github Retorna informa√ß√µes sobre um usu√°rio ou organiza√ß√£o do GitHub.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^geral_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
‚ú® Geral

**Admin:**

‚Ä¢ /ban  Bane a um usu√°rio.
‚Ä¢ /unban Desbane a um usu√°rio.
‚Ä¢ /kick Chute o usu√°rio.
‚Ä¢ /mute Silencia o usu√°rio.
‚Ä¢ /tmute ( tempo ) Silencia o usu√°rio por um tempo determinado m/h/d.
‚Ä¢ /purge Limpa seu grupo.
‚Ä¢ /del Deleta a mensagem que voc√™ respondeu.
‚Ä¢ /zombies Bane contas exclu√≠das do grupo 
‚Ä¢ /cota : Veja a cota√ß√£o do D√≥lar, Euro, BTC
‚Ä¢ /cep : (cep) Busque um CEP
‚Ä¢ /ddd : Busque um DDD
‚Ä¢ /clima ou /weather  ( cidade ) Busque o clima para uma cidade.
‚Ä¢ /kickme Saia do grupo.
‚Ä¢ /device : Busque um aparelho pelo codename.
‚Ä¢ /app : Busque um app da PlayStore. ( em breve )
‚Ä¢ /setuser : Defina seu username.
‚Ä¢ /lt ou /lastfm : Veja que musica voc√™ est√° scobblando.
‚Ä¢/deluser ou /duser Apague seu username lastfm do meu banco de dados.
‚Ä¢ /char ou /character Busque um Character.
‚Ä¢ /anime Busque um anime.
‚Ä¢ /manga Busque um mang√° 
‚Ä¢ /runs Execute strings aleat√≥rias.
‚Ä¢ /slap Bate no usu√°rio.
‚Ä¢ /insults O bot insulta.
‚Ä¢ /bun finge que baniu o usu√°rio.
‚Ä¢ /github Retorna informa√ß√µes sobre um usu√°rio ou organiza√ß√£o do GitHub.
‚Ä¢ /tr (c√≥digo de idioma) <b>Texto<b> ou mensagem respondida.
‚Ä¢ /getsticker Responda a um adesivo para eu enviar o PNG e as informa√ß√µes do sticker.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^memes_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo **Memes**:

‚Ä¢ /slap D√° um tapa no usu√°rio.
‚Ä¢ /insults Insulta algu√©m com um insulto aleat√≥rio de minhas strings.
‚Ä¢ /runs Responde uma sequ√™ncia aleat√≥ria de minhas strings.
‚Ä¢ /bird ou /passaro Envia a foto de um p√°ssaro.
‚Ä¢ /dog Envia a foto de um cachorro.
‚Ä¢ /cat Envia a foto de um gato
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^misc_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo **Outros**:

‚Ä¢ /id Busca o ID de um usu√°rio ou de um grupo.
‚Ä¢ /info ou /whois Obtem informa√ß√µes sobre um usu√°rio.
‚Ä¢ /cota Mostra a cota√ß√£o do D√≥lar, Euro, BTC, Peso Argentino, Ruplo Russo ETC...
‚Ä¢ /cep (cep)  Busque um CEP.
‚Ä¢ /ddd (ddd) Busque um DDD.
‚Ä¢ /clima ou /weather ( cidade ) Busque o clima para uma cidade.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^purges_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o m√≥dulo <b>Purges</b>:

‚Ä¢ /purge Exclui todas as mensagens desde a marcada at√© a √∫ltima mensagem.
‚Ä¢ /del Exclui a mensagem que voc√™ respondeu. 
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


    @megux.on_callback_query(filters.regex(pattern=r"^stickers_help_button$"))
    async def infos(client: megux, cb: CallbackQuery):
        info_text = f"""
Aqui est√° a ajuda para o modulo <b>Stickers</b>:

‚Ä¢ /stickerid: responda a um adesivo para eu lhe dizer seu ID de arquivo.
‚Ä¢ /getsticker: responda a um adesivo para fazer o upload do arquivo PNG bruto.
‚Ä¢ /kang: responda a um sticker para adicion√°-lo ao seu pacote.
    """
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ü© Voltar", callback_data="help_menu"),
                ]
            ]
        )
        await megux.edit_message_caption(
            chat_id=cb.message.chat.id,
            message_id=cb.message.message_id,
            caption=info_text,
            reply_markup=button,
        )


@megux.on_message(filters.new_chat_members)
async def thanks_for(c: megux, m: Message):
    user = (
        f"<a href='tg://user?id={m.from_user.id}'>{m.from_user.first_name}</a>")
    gp_title = m.chat.title
    gp_id = m.chat.id

    text_add = f"#NEW_GROUP #LOGS\n\n**Grupo**: __{gp_title}__\n**ID:** __{gp_id}__\n**User:** __{user}__"
    if m.chat.username:
        text_add += f"**\nUsername:** @{m.chat.username}"
    if c.me.id in [x.id for x in m.new_chat_members]:
        await c.send_message(chat_id=CHAT_LOGS, text=text_add)
        await c.send_message(
            chat_id=m.chat.id,
            text=("""
__Ol√° pessoal obrigado por me adicionar aqui!__\n**Eu sou o WhiterKang**, Prazer em conhece-los.
"""
                  ),
            disable_notification=True,
        )
        found = await GROUPS.find_one({"id_": gp_id})
        if not found:
            await asyncio.gather(
                GROUPS.insert_one({"id_": gp_id, "title": gp_title}))    
