import httpx
from pyrogram import filters
from pyrogram.types import ( 
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    Message,
)
from typing import Union


from megumin import megux, Config
from megumin.utils import get_collection, get_string, weather_apikey, http


get_coords = "https://api.weather.com/v3/location/search"
url = "https://api.weather.com/v3/aggcommon/v3-wx-observations-current"


headers = {
    "User-Agent": "Dalvik/2.1.0 (Linux; U; Android 13; M2012K11AG Build/SQ1D.211205.017)"
}

status_emojis = {
    0: "‚õà",
    1: "‚õà",
    2: "‚õà",
    3: "‚õà",
    4: "‚õà",
    5: "üå®",
    6: "üå®",
    7: "üå®",
    8: "üå®",
    9: "üå®",
    10: "üå®",
    11: "üåß",
    12: "üåß",
    13: "üå®",
    14: "üå®",
    15: "üå®",
    16: "üå®",
    17: "‚õà",
    18: "üåß",
    19: "üå´",
    20: "üå´",
    21: "üå´",
    22: "üå´",
    23: "üå¨",
    24: "üå¨",
    25: "üå®",
    26: "‚òÅÔ∏è",
    27: "üå•",
    28: "üå•",
    29: "‚õÖÔ∏è",
    30: "‚õÖÔ∏è",
    31: "üåô",
    32: "‚òÄÔ∏è",
    33: "üå§",
    34: "üå§",
    35: "‚õà",
    36: "üî•",
    37: "üå©",
    38: "üå©",
    39: "üåß",
    40: "üåß",
    41: "‚ùÑÔ∏è",
    42: "‚ùÑÔ∏è",
    43: "‚ùÑÔ∏è",
    44: "n/a",
    45: "üåß",
    46: "üå®",
    47: "üå©",
}


def get_status_emoji(status_code: int) -> str:
    return status_emojis.get(status_code, "n/a")


@megux.on_message(filters.command(["weather", "clima"], prefixes=["/", "!"]))
@megux.on_inline_query(filters.regex(r"^(clima|weather)"))
async def weather(c: megux, m: Union[InlineQuery, Message]):
    text = m.text if isinstance(m, Message) else m.query
    DISABLED = get_collection(f"DISABLED {m.chat.id}")
    query = "clima"
    off = await DISABLED.find_one({"_cmd": query})
    if off:
        return
    if len(text.split(maxsplit=1)) == 1:
        if isinstance(m, Message):
            return await m.reply_text(await get_string(m.chat.id, "WEATHER_NO_ARGS"))
        return await m.answer(
            [
                InlineQueryResultArticle(
                    title="Local n√£o especificado",
                    input_message_content=InputTextMessageContent(
                        message_text=await get_string(m.chat.id, "WEATHER_NO_ARGS"),
                    ),
                )
            ],
            cache_time=0,
        )
    r = await http.get(
        get_coords,
        headers=headers,
        params=dict(
            apiKey=weather_apikey,
            format="json",
            language=await get_string(m.chat.id, "WEATHER_LANGUAGE"),
            query=m.text.split(maxsplit=1)[1],
        ),
    )
    loc_json = r.json()
    if not loc_json.get("location"):
        if isinstance(m, Message):
            return await m.reply_text(await get_string(m.chat.id, "WEATHER_LOCATION_NOT_FOUND"))

        return await m.answer(
            [
                InlineQueryResultArticle(
                    title=await get_string(m.chat.id, "WEATHER_LOCATION_NOT_FOUND"),
                    input_message_content=InputTextMessageContent(
                        message_text=await get_string(m.chat.id, "WEATHER_LOCATION_NOT_FOUND"),
                    ),
                )
            ],
            cache_time=0,
        )
    else:
        pos = f"{loc_json['location']['latitude'][0]},{loc_json['location']['longitude'][0]}"
        r = await http.get(
            url,
            headers=headers,
            params=dict(
                apiKey=weather_apikey,
                format="json",
                language=await get_string(m.chat.id, "WEATHER_LANGUAGE"),
                geocode=pos,
                units=await get_string(m.chat.id, "WEATHER_UNIT"),
            ),
        )
        res_json = r.json()

        obs_dict = res_json["v3-wx-observations-current"]

        res = (await get_string(m.chat.id, "WEATHER_DETAILS")).format(
            location=loc_json["location"]["address"][0],
            temperature=obs_dict["temperature"],
            feels_like=obs_dict["temperatureFeelsLike"],
            air_humidity=obs_dict["relativeHumidity"],
            wind_speed=obs_dict["windSpeed"],
            overview=f"{get_status_emoji(obs_dict['iconCode'])} {obs_dict['wxPhraseLong']}",
        )

        if isinstance(m, Message):
            await m.reply_text(res)
        else:
            await m.answer(
                [
                    InlineQueryResultArticle(
                        title=loc_json["location"]["address"][0],
                        description=await get_string(m.chat.id, "WEATHER_DETAILS").format(
                            temperature=obs_dict["temperature"],
                            feels_like=obs_dict["temperatureFeelsLike"],
                            air_humidity=obs_dict["relativeHumidity"],
                            wind_speed=obs_dict["windSpeed"],
                            overview=f"{get_status_emoji(obs_dict['iconCode'])} {obs_dict['wxPhraseLong']}",
                        ),
                        input_message_content=InputTextMessageContent(
                            message_text=res,
                        ),
                    )
                ],
                cache_time=0,
            )
